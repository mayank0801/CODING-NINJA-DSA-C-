Given n number of words and an incomplete word w. You need to auto-complete that word w.
That means, find and print all the possible words which can be formed using the incomplete word w.
Note : Order of words does not matter
Sample Input 1 :
7
do dont no not note notes den
no
Sample Output 2 :
no
not
note
notes

class TrieNode {
   public:
    char data;
    TrieNode **children;
    bool isTerminal;

    TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie {
    TrieNode *root;

   public:
    int count;

    Trie() {
        this->count = 0;
        root = new TrieNode('\0');
    }

    bool insertWord(TrieNode *root, string word) {
        // Base case
        if (word.size() == 0) {
            if (!root->isTerminal) {
                root->isTerminal = true;
                return true;
            } else {
                return false;
            }
        }

        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child;

        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        // Recursive call
        return insertWord(child, word.substr(1));
    }

    void insertWord(string word) {
        if (insertWord(root, word)) {
            this->count++;
        }
    }
	TrieNode*search(TrieNode*root,string word)
    {
        if(word.size()==0)
        {
            return root;
        }
        int index=word[0]-'a';
        if(root->children[index]==NULL)
            return NULL;
        return search(root->children[index],word.substr(1));
    }
    void allword(TrieNode*root,string pattern,string output)
    {
        //small cal
        if(root->isTerminal)
            cout<<pattern+output<<endl;
        //recusion call;
        for(int i=0;i<26;i++)
        {
            if(root->children[i]!=NULL)
                allword(root->children[i],pattern,output+root->children[i]->data);
        }
    }
    void autoComplete(vector<string> input, string pattern) {
        // Write your code here
        string ans=pattern;
        Trie T;
        for(int i=0;i<input.size();i++)
        {
            T.insertWord(input[i]);
        }
        TrieNode*temp=search(T.root,pattern);
        if(temp)
        {
            string output="";
            allword(temp,pattern,output); 
        }
    }
};
