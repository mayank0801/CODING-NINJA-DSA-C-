Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word, which itself is a palindrome.
The function should return either true or false. You don't have to print anything.
Sample Input 1 :
4
abc def ghi cba
Sample Output 1 :
true


class TrieNode {
   public:
    char data;
    TrieNode **children;
    bool isTerminal;
    int childCount;

    TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
        childCount = 0;
    }
};

class Trie {
    TrieNode *root;

   public:
    int count;

    Trie() {
        this->count = 0;
        root = new TrieNode('\0');
    }

    bool add(TrieNode *root, string word) {
        // Base case
        if (word.size() == 0) {
            if (!root->isTerminal) {
                root->isTerminal = true;
                return true;
            } else {
                return false;
            }
        }

        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
            root->childCount++;
        }

        // Recursive call
        return add(child, word.substr(1));
    }

    void add(string word) {
        if (add(root, word)) {
            this->count++;
        }
    }

    /*..................... Palindrome Pair................... */
	bool search(TrieNode*root,string word)
    {
        if(root->childCount==0||word.size()==0)
        {
            return true;
        }
        int index=word[0]-'a';
        if(root->children[index]==NULL)
            return false;
        return search(root->children[index],word.substr(1));
    }
    bool isPalindromePair(vector<string> words) {
        // Write your code here
        Trie T;	
        for(int i=0;i<words.size();i++)
        {
            if(T.count==0)
            {
                T.add(words[i]);
            }
            string str=words[i];
            string rev=words[i];
            reverse(rev.begin(),rev.end());
            if(T.search(T.root,rev))
                return true;
            T.add(str);
        }
        return false;
    }
};
