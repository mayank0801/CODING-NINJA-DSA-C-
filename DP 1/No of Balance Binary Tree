Given an integer h, find the possible number of balanced binary trees of height h. You just need to return the count of possible binary trees which are balanced.
This number can be huge, so, return output modulus 10^9 + 7.


//Brute Force
#include<cmath>
int balancedBTs(int n) {
    // Write your code here
    if(n<=1)
        return 1;
    int mod=(int)(pow(10,9))+7;
    
    int a=balancedBTs(n-1);
    int b=balancedBTs(n-2);
    
    int temp1=(int)(((long)(a)*a)%mod);
    int temp2=(int)((2*(long)(a)*b)%mod);
    
    int ans=(temp1+temp2)%mod;
    return ans;  
}

//Memoization
#include<cmath>
int helper(int n,int *ans)
{
    	if(n <= 1) {
		return 1;
	     }
		if(ans[n]!=-1)
            return ans[n];
    
	int mod = (int) (pow(10, 9)) + 7;
	int x = helper(n - 1,ans);
	int y = helper(n - 2,ans);

	int temp1 = (int)(((long)(x)*x) % mod);
	int temp2 = (int)((2* (long)(x) * y) % mod);
	ans[n]=(temp1 + temp2) % mod;
    
    return ans[n];
	

}

int balancedBTs(int n) {
    // Write your code here
    int *ans=new int[n+1];
    for(int i=0;i<=n;i++)
        ans[i]=-1;
    return helper(n,ans);
}

//DP
#include<cmath>
int balancedBTs(int n) {
    // Write your code here
   
    int *ans=new int[n+1];#include<cmath>
int helper(int n,int *ans)
{
    	if(n <= 1) {
		return 1;
	     }
		if(ans[n]!=-1)
            return ans[n];
    
	int mod = (int) (pow(10, 9)) + 7;
	int x = helper(n - 1,ans);
	int y = helper(n - 2,ans);

	int temp1 = (int)(((long)(x)*x) % mod);
	int temp2 = (int)((2* (long)(x) * y) % mod);
	ans[n]=(temp1 + temp2) % mod;
    
    return ans[n];
}

int balancedBTs(int n) {
    // Write your code here
    int *ans=new int[n+1];
    for(int i=0;i<=n;i++)
        ans[i]=-1;
    return helper(n,ans);
}
    ans[0]=1;
    ans[1]=1;
	int mod = (int) (pow(10, 9)) + 7;
    
    for(int i=2;i<=n;i++)
    {
        int x=ans[i-1];
        int y=ans[i-2];
        int temp1 = (int)(((long)(x)*x) % mod);
	      int temp2 = (int)((2*(long)(x) * y) % mod);
        ans[i]=(temp1+temp2)%mod;
    }
    return ans[n];
   }
