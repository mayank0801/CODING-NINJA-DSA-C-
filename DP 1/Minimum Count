Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares.


//Brute Force
int minCount(int n)
{
	//Write your code here
    if(n<=1)
        return n;
    int ans=INT_MAX;
    for(int i=1;i*i<=n;i++)
    {
        int smalloutput=minCount(n-i*i);
        ans=min(smalloutput+1,ans);
    }
    return ans;
}

/Memoization
int helper(int n,int*ans)
{
    if(n<=1)
        return n;
    if(ans[n]!=-1)
        return ans[n];
    int mincount=INT_MAX;
    for(int i=1;i*i<=n;i++)
    {
        int smalloutput=helper(n-i*i,ans);
        mincount=min(smalloutput,mincount);
    }
	ans[n]=mincount+1;
    return ans[n];
    
}
int minCount(int n)
{
    int *ans=new int[n+1];
    for(int i=0;i<=n;i++)
        ans[i]=-1;
    return helper(n,ans);
}

//DP
nt minCount(int n)
{
    int *ans=new int[n+1];
    ans[0]=0;
    ans[1]=1;
    for(int i=2;i<=n;i++)
    {
        ans[i]=INT_MAX;
        for(int j=1;j*j<=i;j++)
        {
            ans[i]=min(ans[i-(j*j)],ans[i]);
            // ans[i]=ans[i]+1;
        }
             ans[i]=ans[i]+1;
    }
    return ans[n];    
}
