Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - Â­1) ,
2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Sample Input 1 :
4
Sample Output 1 :
2 
Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 

//Brute Force
int countMinStepsToOne(int n)
{
	//Write your code here
    if(n==1)
        return 0;
    int x;
    int y=INT_MAX;
    int z=INT_MAX;
    
    x=countMinStepsToOne(n-1);
    if(n%2==0)
        y=countMinStepsToOne(n/2);
    if(n%3==0)
        z=countMinStepsToOne(n/3);
    return 1+min(x,min(y,z));
}

//Memoization
int helper(int n,int *ans)
{
    if(n==1)
        return 0;
    if(ans[n]!=-1)
        return ans[n];
    
    int x=helper(n-1,ans);
    int y=INT_MAX;
    int z=INT_MAX;
    if(n%2==0)
        y=helper(n/2,ans);
    if(n%3==0)
        z=helper(n/3,ans);
    
    ans[n]=1+min(x,min(y,z));
    return ans[n];
    
    
}

int countStepsToOne(int n)
{
	//Write your code here
    int *ans=new int[n+1];
    for(int i=0;i<=n;i++)
    {
        ans[i]=-1;
    }
    return helper(n,ans);
}




//////DP
int countStepsToOne(int n)
{
	//Write your code here
    int *arr=new int[n+1];
    arr[0]=0;
    arr[1]=0;
    arr[2]=1;
    arr[3]=1;
    
    for(int i=4;i<=n;i++)
    {
        int x=arr[i-1];
        int y=INT_MAX;
        int z=INT_MAX;
        if(i%2==0)
            y=arr[i/2];
        if(i%3==0)
            z=arr[i/3];
        arr[i]=1+min(x,min(y,z));
    }
    return arr[n];
		
}
